name = diberrycontainerregistry001
resourcegroup:diberry-rg-container
loginserver = diberrycontainerregistry001.azurecr.io

username = diberrycontainerregistry001
password = ntRFwOFd9AOmcEUvpOdTEMPwN6D/hTAS

>az group create --name diberry-rg-container --location westus
{
  "id": "/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourceGroups/diberry-rg-container",
  "location": "westus",
  "managedBy": null,
  "name": "diberry-rg-container",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}

>az acr create --resource-group diberry-rg-container --name diberrycontainerregistry001 --sku Basic

{
  "adminUserEnabled": false,
  "creationDate": "2018-12-31T18:21:33.152423+00:00",
  "id": "/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourceGroups/diberry-rg-container/providers/Microsoft.ContainerRegistry/registries/diberrycontainerregistry001",
  "location": "westus",
  "loginServer": "diberrycontainerregistry001.azurecr.io",
  "name": "diberrycontainerregistry001",
  "provisioningState": "Succeeded",
  "resourceGroup": "diberry-rg-container",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}

>az acr login --name diberrycontainerregistry001

Login Succeeded

>az acr list --resource-group diberry-rg-container --query "[].{acrLoginServer:loginServer}" --output table

AcrLoginServer
--------------------------------------
diberrycontainerregistry001.azurecr.io


>docker tag cogsvcs-lang diberrycontainerregistry001.azurecr.io/cogsvcs-lang:latest

no response

> docker images

diberrycontainerregistry001.azurecr.io/cogsvcs-lang                       latest                   93095a2f8858        40 minutes ago      253MB


> docker push diberrycontainerregistry001.azurecr.io/cogsvcs-lang:latest

The push refers to repository [diberrycontainerregistry001.azurecr.io/cogsvcs-lang]
a90dd23560ee: Pushed
630523906d8c: Pushed
816caf41a9a1: Pushed
2924be3aed17: Pushed
45b83a23806f: Pushed
ef68f6734aa4: Pushed
latest: digest: sha256:43d5ee2b872c0dd33e7634e15e8c55be579f3fde6d6147cf47445a8aa0303792 size: 1580



"Create a service principal"
> az ad sp create-for-rbac --skip-assignment
{
  "appId": "55962827-4bd0-41c3-aa91-d8cc383a1025",
  "displayName": "azure-cli-2018-12-31-18-39-32",
  "name": "http://azure-cli-2018-12-31-18-39-32",
  "password": "ba839221-f513-4e86-b952-5a8fcdb9610c",
  "tenant": "72f988bf-86f1-41af-91ab-2d7cd011db47"
}

>az acr show --resource-group diberry-rg-container --name diberrycontainerregistry001 --query "id" --output tsv
/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourceGroups/diberry-rg-container/providers/Microsoft.ContainerRegistry/registries/diberrycontainerregistry001



To grant the correct access for the AKS cluster to use images stored in ACR, create a role assignment using the az role assignment create command. Replace <appId> and <acrId> with the values gathered in the previous two steps.
> az role assignment create --assignee 55962827-4bd0-41c3-aa91-d8cc383a1025 --scope /subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourceGroups/diberry-rg-container/providers/Microsoft.ContainerRegistry/registries/diberrycontainerregistry001 --role Reader
{
  "canDelegate": null,
  "id": "/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourceGroups/diberry-rg-container/providers/Microsoft.ContainerRegistry/registries/diberrycontainerregistry001/providers/Microsoft.Authorization/roleAssignments/d85b34d4-b46e-4239-8eab-a10d7bdb95b0",
  "name": "d85b34d4-b46e-4239-8eab-a10d7bdb95b0",
  "principalId": "b183584b-cec4-4307-8dbc-3fa833b3e394",
  "resourceGroup": "diberry-rg-container",
  "roleDefinitionId": "/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
  "scope": "/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourceGroups/diberry-rg-container/providers/Microsoft.ContainerRegistry/registries/diberrycontainerregistry001",
  "type": "Microsoft.Authorization/roleAssignments"
}

> az aks create --resource-group diberry-rg-container --name diberryAKSCluster --node-count 3  --service-principal 55962827-4bd0-41c3-aa91-d8cc383a1025  --client-secret ba839221-f513-4e86-b952-5a8fcdb9610c  --generate-ssh-keys
SSH key files 'C:\Users\diberry\.ssh\id_rsa' and 'C:\Users\diberry\.ssh\id_rsa.pub' have been generated under ~/.ssh to allow SSH access to the VM. If using machines without permanent storage like Azure Cloud Shell without an attached file share, back up your keys to a safe location

{
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "count": 3,
      "dnsPrefix": null,
      "fqdn": null,
      "maxPods": 110,
      "name": "nodepool1",
      "osDiskSizeGb": 30,
      "osType": "Linux",
      "ports": null,
      "storageProfile": "ManagedDisks",
      "vmSize": "Standard_DS1_v2",
      "vnetSubnetId": null
    }
  ],
  "dnsPrefix": "diberryAKS-diberry-rg-conta-65a101",
  "enableRbac": true,
  "fqdn": "diberryaks-diberry-rg-conta-65a101-83d44847.hcp.westus.azmk8s.io",
  "id": "/subscriptions/65a1016d-0f67-45d2-b838-b8f373d6d52e/resourcegroups/diberry-rg-container/providers/Microsoft.ContainerService/managedClusters/diberryAKSCluster",
  "kubernetesVersion": "1.9.11",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyXd/YyBKx50GNV5WKxqehxR7qrihRjITjKyAvMqOT5IPxlPssJdVQAFgdYOaJnavJke1BbgR1lXZ49pgDSMeasdIWIQa6qW/15sG/G1/1pHBR0krzQTQtvDfLlablgGUbKVYOlVGtEq2jRsmKsNJWLxvohR2d81mFC+LSUTh5qT9cjJZhkFEuXY5DVljTI0BNYKqrfMkV0QW7Yne2MEkgLCm/SJfZjFy5mDDPZrPayDt2MkhdMPmFJsid5bFT4zT02j5wIAmDDcW1pCiNOm8CgduzulUnn57QAc+NoFjOY8cWrDfsk9ibzqkFE5vjy1BrdKVfRsQfbtGfXnSOKptb"
        }
      ]
    }
  },
  "location": "westus",
  "name": "diberryAKSCluster",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "dockerBridgeCidr": "172.17.0.1/16",
    "networkPlugin": "kubenet",
    "networkPolicy": null,
    "podCidr": "10.244.0.0/16",
    "serviceCidr": "10.0.0.0/16"
  },
  "nodeResourceGroup": "MC_diberry-rg-container_diberryAKSCluster_westus",
  "provisioningState": "Succeeded",
  "resourceGroup": "diberry-rg-container",
  "servicePrincipalProfile": {
    "clientId": "55962827-4bd0-41c3-aa91-d8cc383a1025",
    "keyVaultSecretRef": null,
    "secret": null
  },
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters"
}

install kub cli from https://storage.googleapis.com/kubernetes-release/release/v1.13.1/bin/windows/amd64/kubectl.exe

connect to cluster
>az aks get-credentials --resource-group diberry-rg-container --name diberryAKSCluster

Merged "diberryAKSCluster" as current context in C:\Users\diberry\.kube\config

To verify the connection to your cluster, run the kubectl get nodes command:
>kubectl get nodes
NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-10707104-0   Ready     agent     6m        v1.9.11
aks-nodepool1-10707104-1   Ready     agent     6m        v1.9.11
aks-nodepool1-10707104-2   Ready     agent     6m        v1.9.11















in programming language directory, docker build:

The frontend project is an API layer that obfuscates the cog service api call. 
You can add anything this this api layer including authentication and authorization, logging, etc. 

1) clone samples repo 
1) go into frontend directory cognitive-services-containers-samples\dotnet\Language\FrontendService


1) docker build -t myworkspacrqzmupwbu.azurecr.io/diberry .

    successful build means all front-end project dependencies were found and loaded onto image
    make sure to tag it with full qualified Registry
    az acr list --resource-group myResourceGroup --query "[].{acrLoginServer:loginServer}" --output table
    
1) put image up on Azure Container Registry
    1) login to Registry    
        az acr login --name diberryContainerRegistry001
    1) get login server name
        az acr list --resource-group diberry-container-ResourceGroup --query "[].{acrLoginServer:loginServer}" --output table
        myworkspacrqzmupwbu.azurecr.io
    1) tag image with login server

        docker tag microsoft/aci-helloworld <acrLoginServer>/aci-helloworld:v1



        docker tag cogsvcs-lang diberrycontainerregistry001.azurecr.io/cogsvcs-lang:latest

       
    1) docker push

        docker push <acrLoginServer>/aci-helloworld:v1
        
        docker push diberrycontainerregistry001.azurecr.io/cogsvcs-lang:latest


